Turbo Assembler	 Version 4.1	    02/13/23 28:56:44	    Page 1
addtwonu.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals __
      4
      5				     org 100h
      6
      7	0100  B8 B800		     Start:  mov ax, 0b800h
      8	0103  8E C0			     mov es, ax		     ;set es to	videomem seg
      9
     10	0105  E8 0019			     call GetNum
     11
     12	0108  BB 0B51			     mov bx, 160d*17 + 160h/2 +	1
     13	010B  B1 7E			     mov cl, 07eh
     14	010D  50			     push ax		     ;save ax
     15	010E  E8 0034			     call OutputNum10
     16	0111  58			     pop ax
     17
     18	0112  B2 7E			     mov dl, 07eh
     19	0114  BB 0BF1			     mov bx, 160d*18 + 160h/2 +	1
     20	0117  E8 004A			     call OutputNum16
     21
     22	011A  BB 0C90			     mov bx, 160d*19 + 160h/2
     23	011D  E8 0073			     call OutputNum2
     24	0120  C3			     ret
     25				     ;-------------------------------------------
     26				     ;Get number from cmd
     27				     ;
     28				     ;Expects:	     label named buffer
     29				     ;
     30				     ;Entry:	     None
     31				     ;
     32				     ;Output:	     ax	- number
     33				     ;
     34				     ;Destroys:	     cx, dx, ax
     35				     ;
     36				     ;-------------------------------------------
     37	0121			     GetNum  proc
     38
     39	0121  BA 0000r			     lea dx, buffer
     40	0124  B4 0A			     mov ah, 0ah
     41	0126  CD 21			     int 21h		     ;get number from cml
     42
     43	0128  33 C9			     xor cx, cx
     44	012A  8A 0E 0001r		     mov cl, buffer[1]	     ;get length of number
     45
     46	012E  33 C0			     xor ax, ax
     47	0130  BA 000A			     mov dx, 10d
     48	0133  BE 0002			     mov si, 2h
     49
     50	0136  F6 E2			     __Next: mul dl		     ;ax = ax*10
     51	0138  8A B4 0000r			     mov dh, si	+ buffer     ;put in dh	next simbol
     52	013C  80 EE 30				     sub dh, 48d	     ;convert simbol to	number
     53	013F  02 C6				     add al, dh		     ;ax += dh
     54
     55	0141  46				     inc si
     56	0142  E2 F2				     loop __Next
     57	0144  C3			     ret
Turbo Assembler	 Version 4.1	    02/13/23 28:56:44	    Page 2
addtwonu.asm



     58	0145				     endp
     59
     60				     ;-------------------------------------------
     61
     62				     ;-------------------------------------------
     63				     ;Put number in dec	form in	videomem
     64				     ;
     65				     ;Expects:	     es->Videomem
     66				     ;
     67				     ;Entry:	     bx	- offset in videomem
     68				     ;		     ax	- number for output
     69				     ;		     cl	- color	atr for	output
     70				     ;
     71				     ;Output:	     None
     72				     ;
     73				     ;Destroys:	     si, di, dx, ax, bx
     74				     ;
     75				     ;-------------------------------------------
     76	0145			     OutputNum10     proc
     77	0145  33 F6			     xor si, si
     78	0147  BF 000A			     mov di, 10d
     79
     80	014A  33 D2			     Next:   xor dx, dx
     81	014C  F7 F7				     div di			     ;ax = ax/10
     82										     ;dl = ax%10
     83
     84	014E  80 C2 30				     add dl, 48d		     ;make symbol from num
     85
     86	0151  26: 88 57	FF			     mov byte ptr es:[bx-1], dl	     ;put symbol in vmem
     87	0155  26: 88 0F				     mov byte ptr es:[bx],   cl	     ;put color	in vmem
     88
     89	0158  32 E4				     xor ah, ah
     90	015A  83 EB 02				     sub bx, 2
     91	015D  46				     inc si
     92
     93	015E  83 FE 05				     cmp si, 5
     94	0161  7C E7				     jl	Next
     95	0163  C3			     ret
     96	0164				     endp
     97
     98				     ;----------------------------------------------
     99				     ;Put number in hex	form in	videomem
    100				     ;
    101				     ;Expects:	     es->VideoMem
    102				     ;
    103				     ;Entry:	     bx	- offset in videomem
    104				     ;		     ax	- number to output
    105				     ;		     dl	- color	atr to output
    106				     ;
    107				     ;Output:	     None
    108				     ;
    109				     ;Destroys:	     si, bx, cx
    110				     ;
    111				     ;----------------------------------------------
    112	0164			     OutputNum16     proc
    113	0164  33 C9			     xor cx, cx
    114	0166				     __Next:				     ;do
Turbo Assembler	 Version 4.1	    02/13/23 28:56:44	    Page 3
addtwonu.asm



    115	0166  BE 000F				     mov si, 000fh
    116
    117	0169  D0 E1 D0 E1			     shl cl, 2			     ;cl = cl*4
    118
    119	016D  D3 E6				     shl si, cl
    120	016F  23 F0				     and si, ax
    121	0171  D3 EE				     shr si, cl
    122	0173  83 C6 30				     add si, 48d		     ;number to	symbol
    123
    124	0176  D0 E9 D0 E9			     shr cl, 2			     ;cl = cl/4
    125
    126	017A  83 FE 3A				     cmp si, 58
    127	017D  7C 03				     jl	Is_0_9
    128	017F  83 C6 07				     add si, 7			     ; if(si > 58) si +=7
    129	0182				     Is_0_9:
    130
    131	0182  26: 89 77	FF			     mov word ptr es:[bx-1], si	     ;put symb in vmem
    132	0186  26: 88 17				     mov byte ptr es:[bx], dl	     ;put color	in vmem
    133	0189  83 EB 02				     sub bx, 2			     ;bx -= 2
    134
    135	018C  41				     inc cx			     ;cx++
    136	018D  83 F9 04				     cmp cx, 4h			     ;while(cx < 4)
    137	0190  7C D4				     jl	__Next
    138
    139	0192  C3			     ret
    140	0193				     endp
    141				     ;----------------------------------------------
    142
    143				     ;----------------------------------------------
    144				     ;Put number in binary form	in videomem
    145				     ;
    146				     ;Expects:	     es->VideoMem
    147				     ;
    148				     ;Entry:	     bx	- offset in videomem
    149				     ;		     ax	- number to output
    150				     ;		     dl	- color	atr to output
    151				     ;
    152				     ;Output:	     None
    153				     ;
    154				     ;Destroys:	     bx,cx,si
    155				     ;----------------------------------------------
    156	0193			     OutputNum2	     proc
    157
    158	0193  B9 0010			     mov cx, 10h	     ;set number of bits in number
    159
    160	0196  BE 0001			     __Next: mov si, 1
    161	0199  49				     dec cx
    162	019A  D3 E6				     shl si, cl			     ;si = 2^(cx-1)
    163
    164	019C  23 F0				     and si, ax
    165	019E  D3 EE				     shr si, cl;		     ;si = (ax%(2^cx))/2^cx
    166	01A0  41				     inc cx
    167	01A1  83 C6 30				     add si, 48			     ;make char	from number
    168
    169	01A4  26: 89 37				     mov word ptr es:[bx],  si	     ;print 1 or 0
    170	01A7  26: 88 57	01			     mov byte ptr es:[bx+1], dl	     ;put color	in vmem
    171	01AB  83 C3 02				     add bx, 2
Turbo Assembler	 Version 4.1	    02/13/23 28:56:44	    Page 4
addtwonu.asm



    172	01AE  E2 E6				     loop __Next
    173
    174	01B0  C3			     ret
    175	01B1				     endp
    176				     ;----------------------------------------------
    177
    178	01B1			     .data
    179	0000  05 ?? 05*(20)		     buffer db 5, ?, 5 dup(' ')
    180
    181				     end Start
Turbo Assembler	 Version 4.1	    02/13/23 28:56:44	    Page 5
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/13/23"
??FILENAME			  Text	 "addtwonu"
??TIME				  Text	 "28:56:44"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 ADDTWONU
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUFFER				  Byte	 DGROUP:0000
GETNUM				  Near	 DGROUP:0121
IS_0_9				  Near	 DGROUP:0182
NEXT				  Near	 DGROUP:014A
OUTPUTNUM10			  Near	 DGROUP:0145
OUTPUTNUM16			  Near	 DGROUP:0164
OUTPUTNUM2			  Near	 DGROUP:0193
START				  Near	 DGROUP:0100
__NEXT				  Near	 DGROUP:0136
__NEXT				  Near	 DGROUP:0166
__NEXT				  Near	 DGROUP:0196

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0007 Word	  Public  DATA
  _TEXT				  16  01B1 Word	  Public  CODE
